
Project Description
===================

Configuration files used by :code:`drom` are in `TOML syntax
<https://toml.io/en/>`__. See also `Learn TOML in Y minutes
<https://learnxinyminutes.com/docs/toml/>`__ for a very quick
introductio.

The :code:`drom.toml` Project File
----------------------------------

To get a feeling of what is in this file, we can look at the one used for
:code:`drom` itself::
  
  [project]
  authors = ["Fabrice Le Fessant <fabrice.le_fessant@origin-labs.com>"]
  copyright = "OCamlPro SAS & Origin Labs SAS"
  dir = "src"
  edition = "4.10.0"
  github-organization = "ocamlpro"
  kind = "program"
  license = "LGPL2"
  min-edition = "4.03.0"
  mode = "binary"
  name = "drom"
  synopsis = "The drom tool is a wrapper over opam/dune in an attempt to provide a cargo-like user experience"
  version = "0.1.0"
  
  # keys that you could also define:
  # archive = "...archive..."
  # dev-repo = "...dev-repo..."
  # bug-reports = "...bug-reports..."
  # doc-api = "...doc-api..."
  # doc-gen = "...doc-gen..."
  # homepage = "...homepage..."
  
  [project]
  description = """
  The drom tool is a wrapper over opam/dune in an attempt to provide a cargo-like
  user experience. It can be used to create full OCaml projects with
  sphinx and odoc documentation. It has specific knowledge of Github and
  will generate files for Github Actions CI and Github pages.
  """

  [drom]
  skip = "src/main.ml main/main.ml sphinx/index.rst CHANGES.md"
  
  [dependencies]
  ez_cmdliner = "0.1.0"
  ez_config = "0.1.0"
  ez_file = "0.1.0"
  opam-file-format = "2.0.0"
  toml = "5.0.0"
  
  [tools]
  dune = "2.6.0"
  
  [project]
  pack-modules = true

The :code:`[project]` table
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This table describes the main project. For multi-package projects,
these fields are used as default if the corresponding fields are not
specified in sub-packages.

Here is a short description of the fields:

* :code:`name`: the name of the project and of its main package.
* :code:`version`: the current version of the project
* :code:`authors`: the list of authors of the project, to display in
  opam files and in the documentation
* :code:`copyright`: the name of the copyright holder for the project
* :code:`dir`: the directory containing the source files of the main
  package (:code:`"src"` by default)
* :code:`edition`: the version of OCaml to be used by default, when
  building locally or on the CI
* :code:`github-organization`: the organization owning the project on Github.
  This field is used to compute the URLs for the documentation.
* :code:`kind`: specify whether the main package is a program
  (:code:`"program"`) or a library (:code:`"library"`).
* :code:`license`: the identifier of the license. See the section
  about licenses. :code:`drom` knows a few license and may
  automatically generate the corresponding files.
* :code:`min-edition`: the minimal version of OCaml with which the
  project can be built. The CI will start at least one job with this
  version.
* :code:`mode`: the target of the compilation. It is either
  :code:`"binary"` for an executable, or :code:`javascript` for a
  file generated by :code:`js_of_ocaml`.
* :code:`synopsis`: a very short description of the
  project. :code:`opam` requires this field to start with an uppercase
  letter and not end with a dot.
* :code:`description`: a long description of the project.
* :code:`pack-modules`: a bool indicating whether modules should be
  packed. :code:`true` by default. It corresponds to the
  :code:`wrapped` field of :code:`dune`.
* :code:`pack`: the name of the module to use, instead of the value of
  :code:`name`, when :code:`pack-modules` is :code:`true`.

Some fields are computed automatically if :code:`github-organization`
is specified, but can be overriden:
        
* :code:`archive`: the URL from where the sources can be
  downloaded. Can contain :code:`${version}` instead of the version.
* :code:`dev-repo`: the location of the VCS for the project. They are
  often specified with :code:`git+https://`.
* :code:`bug-reports`: the URL where issues can be created.
* :code:`doc-api`: the URL where the documentation of the API can be found.
* :code:`doc-gen`: the URL where the general documentation can be found.
* :code:`homepage`: the URL of the project main homepage
  

  
The :code:`[dependencies]` table
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This section contains dependencies with their versions. These
dependencies are for libraries only, as they will be added in the
generated :code:`dune` files.

For example::

  ez_config = "0.1.0"

means that the project should be linked with :code:`ez_config` with a
version compatible with :code:`0.1.0`. :code:`drom` uses semantic
versioning, so it means :code:`version >= 0.1.0` and :code:`version <
1.0.0`. If the version is not formatted as :code:`X.Y.Z`, :code:`drom`
will only generate a constraint :code:`version >= V`.

It is possible to specify that the package has a different name from
the library::

  ez-config = "0.1.0 ez_config"

means that the project depends on the :code:`opam` package
:code:`ez-config`, and that it should be linked with the corresponding
library :code:`ez_config`.

The :code:`[tools]` table
~~~~~~~~~~~~~~~~~~~~~~~~~

This section contains dependencies that will appear in the
:code:`opam` files, but not as libraries in the :code:`dune` files.

The :code:`[drom]` table
~~~~~~~~~~~~~~~~~~~~~~~~

This section contains fields changing the behavior of :code:`drom` for
this project.

* :code:`skip` contains a space-separated list of files, that should
  not be modified anymore by :code:`drom`. By default, :code:`drom`
  will generate any missing file, and upgrade any file that was
  previously generated by :code:`drom` and not modified since
  then. :code:`drom` will print a warning everytime it finds a
  modified file. This option can be used to avoid this warning, or to
  prevent :code:`drom` from recreating an unwanted file.  :code:`drom`
  generates a file :code:`_drom/maximum-skip-field.txt` showing all
  the values that can appear in this field.

  An exception is the :code:`drom.toml` file itself. It is only
  modified when the user configuration has been changed, a changing
  option passed to :code:`drom new`, or the :code:`--upgrade` option
  to benefit from a more recent version of :code:`drom`.

  To detect modifications of its files, :code:`drom` generates a file
  `.drom` in the project. This file should be committed in the
  repository with the files, so that :code:`drom` can always use it to
  detect changes.

  Every time :code:`drom` skips a file because it has been modified,
  it saves the new version in the :code:`_drom/skipped/` directory.

  For example, if :code:`drom` outputs::

    [...]
    Skipping modified file dune-project
    [...]

  You can use the command::
  
    $ diff dune-project _drom/skipped/dune-project

  to see the differences. if the differences are meaningless, you may
  then decide to promote the new file by removing your file and
  restarting :code:`drom`.


